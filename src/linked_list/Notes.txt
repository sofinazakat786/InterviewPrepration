********************************************Linked List*******************************************************
//Definition of Linked List:
//A linked list is a linear data structure where each element is a separate object in the form of nodes.
  Each node has two components: data and a reference to the next node in the sequence.
//Advantages of Linked List:
1. Dynamic Data Structure: Linked lists are dynamic data structures that can grow and shrink as needed.
2. Insertion and Deletion: Insertion and deletion of nodes are really easier.
3. No Memory Wastage: In linked lists, memory is allocated only when we add elements to the list.
4. Implementation: Data structures like stack and queues can be easily implemented using a linked list.
//Disadvantages of Linked List:
1. Memory Usage: More memory is required to store elements in linked lists as compared to arrays.
2. Traversal: In linked lists, we cannot access elements randomly. We have to access elements sequentially starting from the first node.
3. Reverse Traversal: In singly linked lists, reverse traversal is not possible.
4. Extra Memory: Extra memory is required for a pointer in each element of the list.
//Types of Linked List:
1. Singly Linked List: In a singly linked list, each node in the list stores the data of the node and a reference or link to the next node in the list.
2. Doubly Linked List: In a doubly linked list, each node has a data part and two references, one to the previous node and one to the next node.
3. Circular Linked List: In a circular linked list, the last node of the list contains a reference to the first node of the list.
//Applications of Linked List:
1. Implementation of Stacks and Queues
2. Implementation of Graphs: Linked lists are used to implement graphs.
3. Dynamic Memory Allocation: Linked lists are used to allocate memory dynamically.
4. File Systems: Linked lists are used to maintain the list of files in a directory.
5. Image Viewer: Linked lists are used to implement the previous and next images in an image viewer.
//Linked List Operations:
1. Insertion: Insert an element at the beginning, end, or at any position in the linked list.
2. Deletion: Delete an element from the beginning, end, or at any position in the linked list.
3. Traversal: Traverse the linked list and print the elements.
4. Search: Search for an element in the linked list.
5. Update: Update the value of a node in the linked list.
6. Reverse: Reverse the linked list.
7. Merge: Merge two linked lists into a single linked list.
8. Sort: Sort the linked list.
9. Detect Loop: Detect a loop in the linked list.
10. Remove Loop: Remove a loop in the linked list.
//Linked List Implementation in Java:
class Node {
  int data;
  Node next;
  Node(int data) {
    this.data = data;
    this.next = null;
  }
}
class LinkedList {
  Node head;
  void insertAtEnd(int data) {
    Node newNode = new Node(data);
    if (head == null) {
      head = newNode;
      return;
    }
    Node temp = head;
    while (temp.next != null) {
      temp = temp.next;
    }
    temp.next = newNode;
  }
  void display() {
    Node temp = head;
    while (temp != null) {
      System.out.print(temp.data + " ");
      temp = temp.next;
    }
  }
}